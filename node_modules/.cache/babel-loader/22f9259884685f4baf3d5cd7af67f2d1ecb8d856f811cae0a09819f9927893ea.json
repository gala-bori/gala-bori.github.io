{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/gala-bori/Submission/src/components/Movies.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport 'bootstrap';\nimport { useNavigate } from 'react-router-dom';\nimport { AgGridReact } from \"ag-grid-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Movies() {\n  _s();\n  const [searchValue, setSearchValue] = useState('');\n  const [searchYear, setSearchYear] = useState('');\n  const [rowData, setRowData] = useState([]);\n  const navigate = useNavigate();\n  const columns = [\n  //Define columns for Ag Table\n  {\n    headerName: \"Title\",\n    field: \"title\",\n    sortable: true\n  }, {\n    headerName: \"Year\",\n    field: \"year\",\n    sortable: true\n  }, {\n    headerName: \"IMDB Rating\",\n    field: \"imdbRating\",\n    sortable: true\n  }, {\n    headerName: \"RottenTomatoes\",\n    field: \"rottenTomatoesRating\",\n    sortable: true\n  }, {\n    headerName: \"Metacritic\",\n    field: \"metacriticRating\",\n    sortable: true\n  }, {\n    headerName: \"Classification\",\n    field: \"classification\",\n    sortable: true\n  }];\n  useEffect(() => {\n    //Initate GET for movie by title and or year. \n    const url = `http://sefdb02.qut.edu.au:3000/movies/search?title=${searchValue}&year=${searchYear}`;\n    fetch(url).then(res => {\n      if (res.status === 200) {\n        return res.json();\n      } else if (res.status === 400) {\n        throw new Error(\"Invalid query parameters:\");\n      } else if (res.status === 404) {\n        throw new Error(\"No record exists of a movie with this ID\");\n      } else if (res.status === 429) {\n        throw new Error(\"Too many requests, please try again later.\");\n      } else {\n        throw new Error(\"Request failed, something is very wrong...\");\n      }\n    }).then(data => data.data).then(data => data.map(movie => {\n      return {\n        //Assign returned value to variables\n        title: movie.title,\n        year: movie.year,\n        classification: movie.classification,\n        imdbID: movie.imdbID,\n        rottenTomatoesRating: movie.rottenTomatoesRating,\n        metacriticRating: movie.metacriticRating,\n        imdbRating: movie.imdbRating\n      };\n    })).then(movies => {\n      setRowData(movies);\n    }).catch(error => {\n      alert(error.message);\n      console.log(error); //Display/log any errors\n    });\n  }, [searchValue, searchYear]);\n  const rowCount = rowData.length;\n  return (\n    /*#__PURE__*/\n    //Renders two search boxes, Ag Grid table and conditional HTML\n    _jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [searchYear, \" \", searchValue, /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: searchValue,\n          onChange: x => setSearchValue(x.target.value),\n          placeholder: \"Enter Movie Title!\",\n          className: \"form-control custom-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: searchYear,\n          onChange: x => setSearchYear(x.target.value),\n          placeholder: \"Enter Movie Year!\",\n          inputMode: \"numeric\",\n          pattern: \"\\\\d*\",\n          className: \"form-control custom-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select a movie...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ag-theme-balham\",\n        style: {\n          height: \"800px\",\n          width: \"100%\",\n          maxWidth: \"1250px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(AgGridReact, {\n          columnDefs: columns,\n          rowData: rowData,\n          onRowClicked: row => navigate(`/Movie?imdbID=${row.data.imdbID}`) //Change URL such that it can be grabbed\n          ,\n          domLayout: \"normal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this), rowCount >= 100 ?\n      /*#__PURE__*/\n      //Display text if more then 100 results...\n      _jsxDEV(\"p\", {\n        children: \"Displaying the first 100 Results!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [rowCount, \" Results Found!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(Movies, \"UulkrvHaXui1Xf70rzRvyewazKQ=\", false, function () {\n  return [useNavigate];\n});\n_c = Movies;\nexport default Movies;\nvar _c;\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"names":["useState","useEffect","useNavigate","AgGridReact","jsxDEV","_jsxDEV","Movies","_s","searchValue","setSearchValue","searchYear","setSearchYear","rowData","setRowData","navigate","columns","headerName","field","sortable","url","fetch","then","res","status","json","Error","data","map","movie","title","year","classification","imdbID","rottenTomatoesRating","metacriticRating","imdbRating","movies","catch","error","alert","message","console","log","rowCount","length","style","display","flexDirection","alignItems","children","type","value","onChange","x","target","placeholder","className","fileName","_jsxFileName","lineNumber","columnNumber","inputMode","pattern","height","width","maxWidth","columnDefs","onRowClicked","row","domLayout","_c","$RefreshReg$"],"sources":["/home/user/Documents/gala-bori/Submission/src/components/Movies.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport 'bootstrap';\nimport { useNavigate } from 'react-router-dom';\nimport { AgGridReact } from \"ag-grid-react\";\n\nfunction Movies() {\n  const [searchValue, setSearchValue] = useState('');\n  const [searchYear, setSearchYear] = useState('');\n  const [rowData, setRowData] = useState([]);\n  const navigate = useNavigate();\n\n  const columns = [ //Define columns for Ag Table\n    { headerName: \"Title\", field: \"title\", sortable: true },\n    { headerName: \"Year\", field: \"year\", sortable: true },\n    { headerName: \"IMDB Rating\", field: \"imdbRating\", sortable: true },\n    { headerName: \"RottenTomatoes\", field: \"rottenTomatoesRating\", sortable: true },\n    { headerName: \"Metacritic\", field: \"metacriticRating\", sortable: true },\n    { headerName: \"Classification\", field: \"classification\", sortable: true },\n  ];\n\n  useEffect(() => { //Initate GET for movie by title and or year. \n    const url = `http://sefdb02.qut.edu.au:3000/movies/search?title=${searchValue}&year=${searchYear}`;\n\n    fetch(url)\n      .then((res) => {\n        if (res.status === 200) {\n          return res.json();\n        } else if (res.status === 400) {\n          throw new Error(\"Invalid query parameters:\");\n        } else if (res.status === 404) {\n          throw new Error(\"No record exists of a movie with this ID\");\n        } else if (res.status === 429) {\n          throw new Error(\"Too many requests, please try again later.\");\n        } else {\n          throw new Error(\"Request failed, something is very wrong...\");\n        }\n      })\n      .then(data => data.data)\n      .then(data =>\n        data.map(movie => {\n          return { //Assign returned value to variables\n            title: movie.title,\n            year: movie.year,\n            classification: movie.classification,\n            imdbID: movie.imdbID,\n            rottenTomatoesRating: movie.rottenTomatoesRating,\n            metacriticRating: movie.metacriticRating,\n            imdbRating: movie.imdbRating,\n          };\n        }))\n      .then(movies => {\n        setRowData(movies);\n      })\n      .catch((error) => {\n        alert(error.message);\n        console.log(error); //Display/log any errors\n      });\n  }, [searchValue, searchYear])\n\n  const rowCount = rowData.length;\n\n  return ( //Renders two search boxes, Ag Grid table and conditional HTML\n    <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n      <h1>\n        {searchYear} {searchValue}\n        <input\n          type=\"text\"\n          value={searchValue}\n          onChange={(x) => setSearchValue(x.target.value)}\n          placeholder=\"Enter Movie Title!\"\n          className=\"form-control custom-input\"\n        />\n        <input\n          type=\"number\"\n          value={searchYear}\n          onChange={(x) => setSearchYear(x.target.value)}\n          placeholder=\"Enter Movie Year!\"\n          inputMode=\"numeric\"\n          pattern=\"\\d*\"\n          className=\"form-control custom-input\"\n        />\n      </h1>\n      <p>Select a movie...</p>\n      <div\n        className=\"ag-theme-balham\"\n        style={{ height: \"800px\", width: \"100%\", maxWidth: \"1250px\" }}\n      >\n        <AgGridReact\n          columnDefs={columns}\n          rowData={rowData}\n          onRowClicked={row => navigate(`/Movie?imdbID=${row.data.imdbID}`)} //Change URL such that it can be grabbed\n          domLayout=\"normal\"\n        />\n      </div>\n      {rowCount >= 100 ? ( //Display text if more then 100 results...\n        <p>Displaying the first 100 Results!</p>\n      ) : (\n        <h3>{rowCount} Results Found!</h3>\n      )}\n    </div>\n  );\n}\n\nexport default Movies;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}