{"ast":null,"code":"var _jsxFileName = \"/home/user/Downloads/Submission/src/components/Actor.js\",\n  _s = $RefreshSig$();\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/styles/ag-grid.css\";\nimport \"ag-grid-community/styles/ag-theme-balham.css\";\nimport { Button } from 'reactstrap';\nimport Chart from './Chart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Actor() {\n  _s();\n  var _actor$roles;\n  const [actor, setActor] = useState({});\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const personId = searchParams.get(\"ID\"); //Get the actorID from the URL\n  const url = `http://sefdb02.qut.edu.au:3000/people/${personId}`;\n  const bearerToken = localStorage.getItem(\"token\"); // get the token from localStorage\n\n  useEffect(() => {\n    //Sends token to allow authorisation and attempts to return actor data\n    fetch(url, {\n      headers: {\n        \"Authorization\": `Bearer ${bearerToken}`,\n        \"accept\": \"application/json\"\n      }\n    }).then(response => {\n      if (response.status === 200) {\n        return response.json();\n      } else if (response.status === 400) {\n        throw new Error(\"Invalid query parameters\");\n      } else if (response.status === 401) {\n        throw new Error(\"Unauthorized\");\n      } else if (response.status === 404) {\n        throw new Error(\"Requested actor cannot be found\");\n      } else if (response.status === 429) {\n        throw new Error(\"Rate limit exceeded\");\n      } else {\n        throw new Error(\"Unknown error occurred\");\n      }\n    }).then(data => {\n      setActor(data);\n    }).catch(error => {\n      console.error(error);\n      alert(error.message); // display window alert for any error\n    });\n  }, [url, bearerToken]);\n  const columns = [\n  //Define columns for Ag Grid Table\n  {\n    headerName: \"Role\",\n    field: \"category\",\n    sortable: true,\n    width: \"flex\"\n  }, {\n    headerName: \"Movie Name\",\n    field: \"movieName\",\n    sortable: true,\n    width: 300\n  }, {\n    headerName: \"Characters\",\n    field: \"characters\",\n    sortable: true\n  }, {\n    headerName: \"IMDb Rating\",\n    field: \"imdbRating\",\n    sortable: true\n  }];\n  const rowData = actor.roles ? actor.roles.map(role => ({\n    //Map returned data to table\n    movieId: role.movieId,\n    movieName: role.movieName,\n    category: role.category || \"N/A\",\n    imdbRating: role.imdbRating || \"N/A\",\n    characters: role.characters.join(\", \") || \"N/A\"\n  })) : [];\n  return (\n    /*#__PURE__*/\n    //Renders Ag Grid table and static boxplot image and back button\n    _jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        overflow: \"hidden\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: actor.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [actor.birthYear || \"N/A\", \"\\u2014\", actor.deathYear || \"—\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select a movie...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ag-theme-balham\",\n        style: {\n          width: \"900px\",\n          overflow: \"hidden\"\n        },\n        children: /*#__PURE__*/_jsxDEV(AgGridReact, {\n          columnDefs: columns,\n          rowData: rowData,\n          rowHeight: 25,\n          headerHeight: 40,\n          domLayout: \"autoHeight\",\n          onRowClicked: row => navigate(`/Movie?imdbID=${row.data.movieId}`),\n          suppressHorizontalScroll: true,\n          suppressBrowserResizeObserver: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Chart, {\n        ratings: ((_actor$roles = actor.roles) === null || _actor$roles === void 0 ? void 0 : _actor$roles.map(role => role.imdbRating)) || [],\n        personName: actor.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"info\",\n        size: \"sm\",\n        className: \"mt-3\",\n        onClick: () => navigate(-1),\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(Actor, \"Pt63hkLSqz6r3akjeI08uKDvBH0=\", false, function () {\n  return [useNavigate, useSearchParams];\n});\n_c = Actor;\nexport default Actor;\nvar _c;\n$RefreshReg$(_c, \"Actor\");","map":{"version":3,"names":["useNavigate","useSearchParams","useState","useEffect","AgGridReact","Button","Chart","jsxDEV","_jsxDEV","Actor","_s","_actor$roles","actor","setActor","navigate","searchParams","personId","get","url","bearerToken","localStorage","getItem","fetch","headers","then","response","status","json","Error","data","catch","error","console","alert","message","columns","headerName","field","sortable","width","rowData","roles","map","role","movieId","movieName","category","imdbRating","characters","join","style","display","flexDirection","alignItems","overflow","children","name","fileName","_jsxFileName","lineNumber","columnNumber","birthYear","deathYear","className","columnDefs","rowHeight","headerHeight","domLayout","onRowClicked","row","suppressHorizontalScroll","suppressBrowserResizeObserver","ratings","personName","color","size","onClick","_c","$RefreshReg$"],"sources":["/home/user/Downloads/Submission/src/components/Actor.js"],"sourcesContent":["import { useNavigate, useSearchParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/styles/ag-grid.css\";\nimport \"ag-grid-community/styles/ag-theme-balham.css\";\nimport { Button } from 'reactstrap';\nimport Chart from './Chart';\n\nfunction Actor() {\n  const [actor, setActor] = useState({});\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const personId = searchParams.get(\"ID\"); //Get the actorID from the URL\n  const url = `http://sefdb02.qut.edu.au:3000/people/${personId}`;\n  const bearerToken = localStorage.getItem(\"token\"); // get the token from localStorage\n\n  useEffect(() => { //Sends token to allow authorisation and attempts to return actor data\n    fetch(url, {\n      headers: {\n        \"Authorization\": `Bearer ${bearerToken}`,\n        \"accept\": \"application/json\"\n      }\n    })\n      .then(response => {\n        if (response.status === 200) {\n          return response.json();\n        } else if (response.status === 400) {\n          throw new Error(\"Invalid query parameters\");\n        } else if (response.status === 401) {\n          throw new Error(\"Unauthorized\");\n        } else if (response.status === 404) {\n          throw new Error(\"Requested actor cannot be found\");\n        } else if (response.status === 429) {\n          throw new Error(\"Rate limit exceeded\");\n        } else {\n          throw new Error(\"Unknown error occurred\");\n        }\n      })\n      .then(data => {\n        setActor(data);\n      })\n      .catch(error => {\n        console.error(error);\n        alert(error.message); // display window alert for any error\n      });\n  }, [url, bearerToken]);\n\n  const columns = [ //Define columns for Ag Grid Table\n    { headerName: \"Role\", field: \"category\", sortable: true, width: \"flex\" },\n    { headerName: \"Movie Name\", field: \"movieName\", sortable: true, width: 300 },\n    { headerName: \"Characters\", field: \"characters\", sortable: true },\n    { headerName: \"IMDb Rating\", field: \"imdbRating\", sortable: true }\n  ];\n\n  const rowData = actor.roles ? actor.roles.map(role => ({ //Map returned data to table\n    movieId: role.movieId,\n    movieName: role.movieName,\n    category: role.category || \"N/A\",\n    imdbRating: role.imdbRating || \"N/A\",\n    characters: role.characters.join(\", \") || \"N/A\"\n  })) : [];\n\n    return ( //Renders Ag Grid table and static boxplot image and back button\n    <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", overflow: \"hidden\" }}>\n      <h2>{actor.name}</h2>\n      <p>{actor.birthYear || \"N/A\"}—{actor.deathYear || \"—\"}</p>\n      <p>Select a movie...</p>\n\n      <div\n        className=\"ag-theme-balham\"\n        style={{ width: \"900px\", overflow: \"hidden\" }}\n      >\n        <AgGridReact\n          columnDefs={columns}\n          rowData={rowData}\n          rowHeight={25}\n          headerHeight={40}\n          domLayout=\"autoHeight\"\n          onRowClicked={row => navigate(`/Movie?imdbID=${row.data.movieId}`)}\n          suppressHorizontalScroll={true}\n          suppressBrowserResizeObserver={true}\n        />\n      </div>\n      <Chart ratings={actor.roles?.map(role => role.imdbRating) || []} personName={actor.name} />\n      <Button\n        color=\"info\"\n        size=\"sm\"\n        className=\"mt-3\"\n        onClick={() => navigate(-1)}\n      >\n        Back\n      </Button>\n    </div>\n  );\n}\n\nexport default Actor;"],"mappings":";;AAAA,SAASA,WAAW,EAAEC,eAAe,QAAQ,kBAAkB;AAC/D,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,eAAe;AAC3C,OAAO,sCAAsC;AAC7C,OAAO,8CAA8C;AACrD,SAASC,MAAM,QAAQ,YAAY;AACnC,OAAOC,KAAK,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAAA,IAAAC,YAAA;EACf,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtC,MAAMY,QAAQ,GAAGd,WAAW,EAAE;EAC9B,MAAM,CAACe,YAAY,CAAC,GAAGd,eAAe,EAAE;EACxC,MAAMe,QAAQ,GAAGD,YAAY,CAACE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;EACzC,MAAMC,GAAG,GAAI,yCAAwCF,QAAS,EAAC;EAC/D,MAAMG,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;;EAEnDlB,SAAS,CAAC,MAAM;IAAE;IAChBmB,KAAK,CAACJ,GAAG,EAAE;MACTK,OAAO,EAAE;QACP,eAAe,EAAG,UAASJ,WAAY,EAAC;QACxC,QAAQ,EAAE;MACZ;IACF,CAAC,CAAC,CACCK,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QAC3B,OAAOD,QAAQ,CAACE,IAAI,EAAE;MACxB,CAAC,MAAM,IAAIF,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QAClC,MAAM,IAAIE,KAAK,CAAC,0BAA0B,CAAC;MAC7C,CAAC,MAAM,IAAIH,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QAClC,MAAM,IAAIE,KAAK,CAAC,cAAc,CAAC;MACjC,CAAC,MAAM,IAAIH,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QAClC,MAAM,IAAIE,KAAK,CAAC,iCAAiC,CAAC;MACpD,CAAC,MAAM,IAAIH,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QAClC,MAAM,IAAIE,KAAK,CAAC,qBAAqB,CAAC;MACxC,CAAC,MAAM;QACL,MAAM,IAAIA,KAAK,CAAC,wBAAwB,CAAC;MAC3C;IACF,CAAC,CAAC,CACDJ,IAAI,CAACK,IAAI,IAAI;MACZhB,QAAQ,CAACgB,IAAI,CAAC;IAChB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpBE,KAAK,CAACF,KAAK,CAACG,OAAO,CAAC,CAAC,CAAC;IACxB,CAAC,CAAC;EACN,CAAC,EAAE,CAAChB,GAAG,EAAEC,WAAW,CAAC,CAAC;EAEtB,MAAMgB,OAAO,GAAG;EAAE;EAChB;IAAEC,UAAU,EAAE,MAAM;IAAEC,KAAK,EAAE,UAAU;IAAEC,QAAQ,EAAE,IAAI;IAAEC,KAAK,EAAE;EAAO,CAAC,EACxE;IAAEH,UAAU,EAAE,YAAY;IAAEC,KAAK,EAAE,WAAW;IAAEC,QAAQ,EAAE,IAAI;IAAEC,KAAK,EAAE;EAAI,CAAC,EAC5E;IAAEH,UAAU,EAAE,YAAY;IAAEC,KAAK,EAAE,YAAY;IAAEC,QAAQ,EAAE;EAAK,CAAC,EACjE;IAAEF,UAAU,EAAE,aAAa;IAAEC,KAAK,EAAE,YAAY;IAAEC,QAAQ,EAAE;EAAK,CAAC,CACnE;EAED,MAAME,OAAO,GAAG5B,KAAK,CAAC6B,KAAK,GAAG7B,KAAK,CAAC6B,KAAK,CAACC,GAAG,CAACC,IAAI,KAAK;IAAE;IACvDC,OAAO,EAAED,IAAI,CAACC,OAAO;IACrBC,SAAS,EAAEF,IAAI,CAACE,SAAS;IACzBC,QAAQ,EAAEH,IAAI,CAACG,QAAQ,IAAI,KAAK;IAChCC,UAAU,EAAEJ,IAAI,CAACI,UAAU,IAAI,KAAK;IACpCC,UAAU,EAAEL,IAAI,CAACK,UAAU,CAACC,IAAI,CAAC,IAAI,CAAC,IAAI;EAC5C,CAAC,CAAC,CAAC,GAAG,EAAE;EAEN;IAAA;IAAS;IACTzC,OAAA;MAAK0C,KAAK,EAAE;QAAEC,OAAO,EAAE,MAAM;QAAEC,aAAa,EAAE,QAAQ;QAAEC,UAAU,EAAE,QAAQ;QAAEC,QAAQ,EAAE;MAAS,CAAE;MAAAC,QAAA,gBACjG/C,OAAA;QAAA+C,QAAA,EAAK3C,KAAK,CAAC4C;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACrBpD,OAAA;QAAA+C,QAAA,GAAI3C,KAAK,CAACiD,SAAS,IAAI,KAAK,EAAC,QAAC,EAACjD,KAAK,CAACkD,SAAS,IAAI,GAAG;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eAC1DpD,OAAA;QAAA+C,QAAA,EAAG;MAAiB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI,eAExBpD,OAAA;QACEuD,SAAS,EAAC,iBAAiB;QAC3Bb,KAAK,EAAE;UAAEX,KAAK,EAAE,OAAO;UAAEe,QAAQ,EAAE;QAAS,CAAE;QAAAC,QAAA,eAE9C/C,OAAA,CAACJ,WAAW;UACV4D,UAAU,EAAE7B,OAAQ;UACpBK,OAAO,EAAEA,OAAQ;UACjByB,SAAS,EAAE,EAAG;UACdC,YAAY,EAAE,EAAG;UACjBC,SAAS,EAAC,YAAY;UACtBC,YAAY,EAAEC,GAAG,IAAIvD,QAAQ,CAAE,iBAAgBuD,GAAG,CAACxC,IAAI,CAACe,OAAQ,EAAC,CAAE;UACnE0B,wBAAwB,EAAE,IAAK;UAC/BC,6BAA6B,EAAE;QAAK;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MACpC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACE,eACNpD,OAAA,CAACF,KAAK;QAACkE,OAAO,EAAE,EAAA7D,YAAA,GAAAC,KAAK,CAAC6B,KAAK,cAAA9B,YAAA,uBAAXA,YAAA,CAAa+B,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACI,UAAU,CAAC,KAAI,EAAG;QAAC0B,UAAU,EAAE7D,KAAK,CAAC4C;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eAC3FpD,OAAA,CAACH,MAAM;QACLqE,KAAK,EAAC,MAAM;QACZC,IAAI,EAAC,IAAI;QACTZ,SAAS,EAAC,MAAM;QAChBa,OAAO,EAAEA,CAAA,KAAM9D,QAAQ,CAAC,CAAC,CAAC,CAAE;QAAAyC,QAAA,EAC7B;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACL;AAEV;AAAClD,EAAA,CAtFQD,KAAK;EAAA,QAEKT,WAAW,EACLC,eAAe;AAAA;AAAA4E,EAAA,GAH/BpE,KAAK;AAwFd,eAAeA,KAAK;AAAC,IAAAoE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}